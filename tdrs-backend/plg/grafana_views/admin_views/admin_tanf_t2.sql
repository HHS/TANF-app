-- AUTOMATICALLY GENERATED FILE ON 2025-05-07 11:16:18
-- DO NOT EDIT - Your changes will be overwritten
-- Generated by generate_admin_views.py

-- SQL view for admin_tanf_t2 schema
-- Transformations applied:
--   * DATE_OF_BIRTH transformed to AGE calculation (as integer)

CREATE OR REPLACE VIEW "admin_tanf_t2" AS SELECT "RecordType","RPT_MONTH_YEAR","CASE_NUMBER","FAMILY_AFFILIATION","NONCUSTODIAL_PARENT","DATE_OF_BIRTH",-- Calculate AGE_FIRST: Age as of the first day of the reporting month
        CASE
            WHEN "DATE_OF_BIRTH" ~ '^[0-9]{8}$' AND
                    -- Validate year (reasonable range)
                    CAST(SUBSTRING("DATE_OF_BIRTH" FROM 1 FOR 4) AS INTEGER) BETWEEN 1900 AND
                    EXTRACT(YEAR FROM CURRENT_DATE) AND
                    -- Validate month (01-12)
                    CAST(SUBSTRING("DATE_OF_BIRTH" FROM 5 FOR 2) AS INTEGER) BETWEEN 1 AND 12 AND
                    -- Validate day (01-31)
                    CAST(SUBSTRING("DATE_OF_BIRTH" FROM 7 FOR 2) AS INTEGER) BETWEEN 1 AND 31 AND
                    -- Validate RPT_MONTH_YEAR format (YYYYMM)
                    "RPT_MONTH_YEAR"::TEXT ~ '^[0-9]{6}$'
            THEN
                -- Simple calculation: (end_date - start_date) / 365.25
                ROUND(
                    EXTRACT(EPOCH FROM (
                        -- Calculate the difference in days between last day of reporting month and birth date
                        (DATE_TRUNC('MONTH', TO_DATE(
                            SUBSTRING("RPT_MONTH_YEAR"::TEXT FROM 1 FOR 4) || '-' ||
                            SUBSTRING("RPT_MONTH_YEAR"::TEXT FROM 5 FOR 2) || '-01',
                            'YYYY-MM-DD'
                        ))) -
                        TO_DATE(
                            SUBSTRING("DATE_OF_BIRTH" FROM 1 FOR 4) || '-' ||
                            SUBSTRING("DATE_OF_BIRTH" FROM 5 FOR 2) || '-' ||
                            SUBSTRING("DATE_OF_BIRTH" FROM 7 FOR 2),
                            'YYYY-MM-DD'
                        )
                    )) / (365.25 * 86400), -- Convert seconds to years (86400 seconds per day)
                    1  -- Round to 1 decimal place
                )
            ELSE NULL
        END AS "AGE_FIRST",-- Calculate AGE_LAST: Age as of the last day of the reporting month
        CASE
            WHEN "DATE_OF_BIRTH" ~ '^[0-9]{8}$' AND
                    -- Validate year (reasonable range)
                    CAST(SUBSTRING("DATE_OF_BIRTH" FROM 1 FOR 4) AS INTEGER) BETWEEN 1900 AND
                    EXTRACT(YEAR FROM CURRENT_DATE) AND
                    -- Validate month (01-12)
                    CAST(SUBSTRING("DATE_OF_BIRTH" FROM 5 FOR 2) AS INTEGER) BETWEEN 1 AND 12 AND
                    -- Validate day (01-31)
                    CAST(SUBSTRING("DATE_OF_BIRTH" FROM 7 FOR 2) AS INTEGER) BETWEEN 1 AND 31 AND
                    -- Validate RPT_MONTH_YEAR format (YYYYMM)
                    "RPT_MONTH_YEAR"::TEXT ~ '^[0-9]{6}$'
            THEN
                -- Simple calculation: (end_date - start_date) / 365.25
                ROUND(
                    EXTRACT(EPOCH FROM (
                        -- Calculate the difference in days between last day of reporting month and birth date
                        (DATE_TRUNC('MONTH', TO_DATE(
                            SUBSTRING("RPT_MONTH_YEAR"::TEXT FROM 1 FOR 4) || '-' ||
                            SUBSTRING("RPT_MONTH_YEAR"::TEXT FROM 5 FOR 2) || '-01',
                            'YYYY-MM-DD'
                        )) + INTERVAL '1 MONTH - 1 day') -
                        TO_DATE(
                            SUBSTRING("DATE_OF_BIRTH" FROM 1 FOR 4) || '-' ||
                            SUBSTRING("DATE_OF_BIRTH" FROM 5 FOR 2) || '-' ||
                            SUBSTRING("DATE_OF_BIRTH" FROM 7 FOR 2),
                            'YYYY-MM-DD'
                        )
                    )) / (365.25 * 86400), -- Convert seconds to years (86400 seconds per day)
                    1  -- Round to 1 decimal place
                )
            ELSE NULL
        END AS "AGE_LAST",-- Determine AGE_VALID
        CASE
            WHEN "DATE_OF_BIRTH" !~ '^[0-9]{8}$' OR
                    -- Validate year (reasonable range)
                    CAST(SUBSTRING("DATE_OF_BIRTH" FROM 1 FOR 4) AS INTEGER) NOT BETWEEN 1900 AND
                    EXTRACT(YEAR FROM CURRENT_DATE) OR
                    -- Validate month (01-12)
                    CAST(SUBSTRING("DATE_OF_BIRTH" FROM 5 FOR 2) AS INTEGER) NOT BETWEEN 1 AND 12 OR
                    -- Validate day (01-31)
                    CAST(SUBSTRING("DATE_OF_BIRTH" FROM 7 FOR 2) AS INTEGER) NOT BETWEEN 1 AND 31
            THEN 0
            ELSE 1
        END AS "AGE_VALID","SSN",CASE
            WHEN "SSN" !~ '^(1{9}|2{9}|3{9}|4{9}|5{9}|6{9}|7{9}|8{9}|9{9})$' THEN 1
            ELSE 0
        END AS "SSN_VALID","RACE_HISPANIC","RACE_AMER_INDIAN","RACE_ASIAN","RACE_BLACK","RACE_HAWAIIAN","RACE_WHITE","SEX","FED_OASDI_PROGRAM","FED_DISABILITY_STATUS","DISABLED_TITLE_XIVAPDT","AID_AGED_BLIND","RECEIVE_SSI","MARITAL_STATUS","RELATIONSHIP_HOH","PARENT_MINOR_CHILD","NEEDS_PREGNANT_WOMAN","EDUCATION_LEVEL","CITIZENSHIP_STATUS","COOPERATION_CHILD_SUPPORT","MONTHS_FED_TIME_LIMIT","MONTHS_STATE_TIME_LIMIT","CURRENT_MONTH_STATE_EXEMPT","EMPLOYMENT_STATUS","WORK_ELIGIBLE_INDICATOR","WORK_PART_STATUS","UNSUB_EMPLOYMENT","SUB_PRIVATE_EMPLOYMENT","SUB_PUBLIC_EMPLOYMENT","WORK_EXPERIENCE_HOP","WORK_EXPERIENCE_EA","WORK_EXPERIENCE_HOL","OJT","JOB_SEARCH_HOP","JOB_SEARCH_EA","JOB_SEARCH_HOL","COMM_SERVICES_HOP","COMM_SERVICES_EA","COMM_SERVICES_HOL","VOCATIONAL_ED_TRAINING_HOP","VOCATIONAL_ED_TRAINING_EA","VOCATIONAL_ED_TRAINING_HOL","JOB_SKILLS_TRAINING_HOP","JOB_SKILLS_TRAINING_EA","JOB_SKILLS_TRAINING_HOL","ED_NO_HIGH_SCHOOL_DIPL_HOP","ED_NO_HIGH_SCHOOL_DIPL_EA","ED_NO_HIGH_SCHOOL_DIPL_HOL","SCHOOL_ATTENDENCE_HOP","SCHOOL_ATTENDENCE_EA","SCHOOL_ATTENDENCE_HOL","PROVIDE_CC_HOP","PROVIDE_CC_EA","PROVIDE_CC_HOL","OTHER_WORK_ACTIVITIES","DEEMED_HOURS_FOR_OVERALL","DEEMED_HOURS_FOR_TWO_PARENT","EARNED_INCOME","UNEARNED_INCOME_TAX_CREDIT","UNEARNED_SOCIAL_SECURITY","UNEARNED_SSI","UNEARNED_WORKERS_COMP","OTHER_UNEARNED_INCOME", 
    data_files.section,
    data_files.version,
    data_files.year,
    data_files.quarter,
    stt.name AS "STT",                                                         -- Select stt_name from the stts table
    stt.stt_code AS "STT_CODE",                                                -- Select stt_code from the stts table
    stt.region_id AS "REGION"                                                  -- Select region from the stts table
FROM search_indexes_TANF_T2 T2
INNER JOIN
        data_files_datafile data_files                                             -- Join with data_files_datafile
        ON T2.datafile_id = data_files.id                              -- Join condition
    INNER JOIN (
        SELECT
            stt_id,                                                                -- Select stt_id
            section,                                                               -- Select section
            year,                                                                  -- Select fiscal_year
            quarter,                                                               -- Select fiscal_quarter
            MAX(version) AS version                                                -- Get the maximum version for each group
        FROM
            data_files_datafile                                                    -- Subquery table
        GROUP BY
            stt_id, section, year, quarter                                         -- Group by columns
    ) most_recent
        ON data_files.stt_id = most_recent.stt_id
        AND data_files.section = most_recent.section
        AND data_files.version = most_recent.version
        AND data_files.year = most_recent.year
        AND data_files.quarter = most_recent.quarter
    INNER JOIN
        stts_stt stt                                                               -- Join with the stts table (aliased as stt)
        ON data_files.stt_id = stt.id                                              -- Join condition to match stt_id
    WHERE
        data_files.year > 2020 AND                                                 -- Filter for fiscal year
        data_files.quarter in ('Q1', 'Q2', 'Q3', 'Q4')                         -- Filter for fiscal quarters
;
