local.file_match "system" {
	path_targets = [{
		__address__ = "localhost",
		__path__    = "/var/log/*log",
		job         = "varlogs-local",
	}]
}

loki.source.file "system" {
	targets               = local.file_match.system.targets
	forward_to            = [loki.write.default.receiver]
	legacy_positions_file = "/tmp/positions.yaml"
}

local.file_match "backend_local" {
	path_targets = [{
		__address__ = "localhost",
		__path__    = "/logs/django.log",
		job         = "backend-local",
	}]
}

loki.process "backend_local" {
	forward_to = [loki.write.default.receiver]

	stage.regex {
		expression = "^(?P<time>\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2},\\d{3}) (?P<level>\\w+) (?P<logger>\\S+) (?P<message>.*)$"
	}

	stage.labels {
		values = {
			level   = null,
			logger  = null,
			message = null,
			time    = null,
		}
	}
}

loki.source.file "backend_local" {
	targets               = local.file_match.backend_local.targets
	forward_to            = [loki.process.backend_local.receiver]
	legacy_positions_file = "/tmp/positions.yaml"
}

local.file_match "backend_prod" {
	path_targets = [{
		__address__ = "localhost",
		__path__    = "/logs/django.log",
		job         = "backend-prod",
	}]
}

loki.source.file "backend_prod" {
	targets               = local.file_match.backend_prod.targets
	forward_to            = [loki.write.default.receiver]
	legacy_positions_file = "/tmp/positions.yaml"
}

local.file_match "frontend_local" {
	path_targets = [{
		__address__ = "localhost",
		__path__    = "/var/log/nginx/access_log.log",
		job         = "frontend-local",
		level       = "DEBUG",
	}, {
		__address__ = "localhost",
		__path__    = "/var/log/nginx/error_log.log",
		job         = "frontend-local",
		level       = "ERROR",
	}]
}

loki.source.file "frontend_local" {
	targets               = local.file_match.frontend_local.targets
	forward_to            = [loki.write.default.receiver]
	legacy_positions_file = "/tmp/positions.yaml"
}

loki.write "default" {
	endpoint {
		url = "http://loki:3100/loki/api/v1/push"
	}
	external_labels = {}
}



prometheus.remote_write "metrics_write" {
    endpoint {
        name = "default"
        url  = "http://prometheus:9090/api/v1/write"
        queue_config { }
        metadata_config { }
    }
}

loki.process "logs_process_client" {
    forward_to = [loki.write.logs_write_client.receiver]

    stage.logfmt {
        mapping = { "kind" = "", "service_name" = "", "app" = "" }
    }

    stage.labels {
        values = { "kind" = "kind", "service_name" = "service_name", "app" = "app" }
    }
}

loki.write "logs_write_client" {
    endpoint {
        url = "http://loki:3100/loki/api/v1/push"
    }
}

logging {
    level = "info"
}

faro.receiver "integrations_app_agent_receiver" {
    server {
        listen_address           = "0.0.0.0"
        listen_port              = 12346
        cors_allowed_origins     = ["*"]
        max_allowed_payload_size = "10MiB"

        rate_limiting {
            rate = 100
        }
    }

    sourcemaps { }

    output {
        logs   = [loki.process.logs_process_client.receiver]
        traces = [otelcol.exporter.otlp.trace_write.input]
    }
}

otelcol.exporter.prometheus "metrics_write" {
  forward_to = [prometheus.remote_write.metrics_write.receiver]
}

otelcol.receiver.otlp "default" {
    grpc {
        include_metadata = true
    }

    output {
        metrics = [otelcol.exporter.prometheus.metrics_write.input]
        logs    = []
        traces  = [otelcol.exporter.otlp.trace_write.input]
    }
}

otelcol.exporter.otlp "trace_write" {
    retry_on_failure {
        max_elapsed_time = "1m0s"
    }

    client {
        endpoint = "http://tempo:4317"
        tls {
            insecure = true
        }
    }

}
