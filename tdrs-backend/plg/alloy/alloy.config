local.file_match "system" {
	path_targets = [{
		__address__ = "localhost",
		__path__    = "/var/log/*log",
		job         = sys.env("ALLOY_SYSTEM_NAME"),
	}]
}

loki.source.file "system" {
	targets               = local.file_match.system.targets
	forward_to            = [loki.write.default.receiver]
	legacy_positions_file = "/tmp/positions.yaml"
}

local.file_match "backend" {
	path_targets = [{
		__address__ = "localhost",
		__path__    = "/tmp/django.log",
		job         = sys.env("ALLOY_BACKEND_NAME"),
	}]
}

loki.process "backend_process" {
	forward_to = [loki.write.default.receiver]

	stage.regex {
		expression = "^(?P<time>\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2},\\d{3}) (?P<level>\\w+) (?P<logger>\\S+) (?P<message>.*)$"
	}
}

loki.source.file "backend" {
	targets               = local.file_match.backend.targets
	forward_to            = [loki.process.backend_process.receiver]
	legacy_positions_file = "/tmp/positions.yaml"
}

loki.write "default" {
	endpoint {
		url = "http://loki.apps.internal:8080/loki/api/v1/push"
	}
	external_labels = {}
}


prometheus.remote_write "metrics_write" {
    endpoint {
        name = "default"
        url  = "http://prometheus.apps.internal:8080/api/v1/write"
        queue_config { }
        metadata_config { }
    }
}

loki.process "logs_process_client" {
    forward_to = [loki.write.default.receiver]

    stage.logfmt {
        mapping = {
			"timestamp" = "",
			"kind" = "",
			"event_name" = "",
			"event_domain" = "",
			"type" = "",
			"value" = "",
			"stacktrace" = "",
			"hash" = "",
			"message" = "",
			"level" = "",

			// Web vitals measurements
			"cls" = "",
			"delta" = "",
			"largest_shift_time" = "",
			"largest_shift_value" = "",
			"element_render_delay" = "",
			"lcp" = "",
			"time_to_first_byte" = "",
			"request_duration" = "",
			"ttfb" = "",
			"waiting_duration" = "",
			"fcp" = "",
			"first_byte_to_fcp" = "",

			// Context fields
			"context_id" = "",
			"context_largest_shift_target" = "",
			"context_load_state" = "",
			"context_navigation_entry_id" = "",
			"context_navigation_type" = "",
			"context_rating" = "",
			"context_element" = "",

			// Value fields
			"value_cls" = "",
			"value_delta" = "",
			"value_largest_shift_time" = "",
			"value_largest_shift_value" = "",
			"value_element_render_delay" = "",
			"value_lcp" = "",
			"value_time_to_first_byte" = "",
			"value_request_duration" = "",
			"value_ttfb" = "",
			"value_waiting_duration" = "",
			"value_fcp" = "",
			"value_first_byte_to_fcp" = "",

			// Event data fields
			"event_data_duration_ns" = "",
			"event_data_http.host" = "",
			"event_data_http.method" = "",
			"event_data_http.response_content_length" = "",
			"event_data_http.scheme" = "",
			"event_data_http.status_code" = "",
			"event_data_http.status_text" = "",
			"event_data_http.url" = "",
			"event_data_http.user_agent" = "",
			"event_data_session.id" = "",
			"event_data_session_id" = "",
			"event_data_cacheHitStatus" = "",
			"event_data_decodedBodySize" = "",
			"event_data_dnsLookupTime" = "",
			"event_data_documentParsingTime" = "",
			"event_data_domContentLoadHandlerTime" = "",
			"event_data_domProcessingTime" = "",
			"event_data_duration" = "",
			"event_data_encodedBodySize" = "",
			"event_data_faroNavigationId" = "",
			"event_data_faroPreviousNavigationId" = "",
			"event_data_faroResourceId" = "",
			"event_data_fetchTime" = "",
			"event_data_initiatorType" = "",
			"event_data_name" = "",
			"event_data_onLoadTime" = "",
			"event_data_pageLoadTime" = "",
			"event_data_protocol" = "",
			"event_data_redirectTime" = "",
			"event_data_renderBlockingStatus" = "",
			"event_data_requestTime" = "",
			"event_data_responseStatus" = "",
			"event_data_responseTime" = "",
			"event_data_serviceWorkerTime" = "",
			"event_data_tcpHandshakeTime" = "",
			"event_data_tlsNegotiationTime" = "",
			"event_data_transferSize" = "",
			"event_data_ttfb" = "",
			"event_data_type" = "",
			"event_data_visibilityState" = "",
			"event_data_fromRoute" = "",
			"event_data_fromUrl" = "",
			"event_data_toRoute" = "",
			"event_data_toUrl" = "",
			"event_data_action" = "",
			"event_data_hasPayload" = "",
			"event_data_timestamp" = "",
			"event_data_page" = "",

			// User information
			"user_id" = "",
			"user_username" = "",
			"user_attr_role" = "",
			"user_attr_stt" = "",
			"user_attr_regions" = "",

			// SDK and App information
			"sdk_version" = "",
			"app_name" = "",
			"app_version" = "",
			"app_environment" = "",
			"service_name" = "",

			// Session information
			"session_id" = "",
			"session_attr_previousSession" = "",
			"page_url" = "",

			// Browser information
			"browser_name" = "",
			"browser_version" = "",
			"browser_os" = "",
			"browser_mobile" = "",
			"browser_userAgent" = "",
			"browser_language" = "",
			"browser_viewportWidth" = "",
			"browser_viewportHeight" = "",
		}
    }

    stage.labels {
		values = {
			"kind" = "kind",
			"event_name" = "event_name",
			"app_name" = "app_name",
			"app_version" = "app_version",
			"app_environment" = "app_environment",
			"service_name" = "app_name",
			"browser_name" = "browser_name",
			"traceID" = "traceID",
			"spanID" = "spanID",
			"session_id" = "session_id",
			"page_url" = "page_url",
			"user_id" = "user_id",
			"user_name" = "user_username",
			"user_roles" = "user_attr_roles",
			"user_stt" = "user_attr_stt",
			"user_regions" = "user_attr_regions",
			"event_data_page" = "page",
			"event_data_action" = "action",
			"event_data_type" = "action_type",
			"context_navigation_type" = "navigation_type",
			"context_rating" = "performance_rating",
		}
	}
}

logging {
    level = "info"
}

faro.receiver "integrations_app_agent_receiver" {
    server {
        listen_address           = "0.0.0.0"
        listen_port              = 12346
        cors_allowed_origins     = ["*"]
        max_allowed_payload_size = "10MiB"

        rate_limiting {
            rate = 100
        }
    }

    sourcemaps { }

    output {
        logs   = [loki.process.logs_process_client.receiver]
        traces = [otelcol.exporter.otlp.trace_write.input]
    }
}

otelcol.exporter.prometheus "metrics_write" {
  forward_to = [prometheus.remote_write.metrics_write.receiver]
}

otelcol.receiver.otlp "default" {
    grpc {
        include_metadata = true
    }

    output {
        metrics = [otelcol.exporter.prometheus.metrics_write.input]
        logs    = []
        traces  = [otelcol.exporter.otlp.trace_write.input]
    }
}

otelcol.exporter.otlp "trace_write" {
    retry_on_failure {
        max_elapsed_time = "1m0s"
    }

    client {
        endpoint = "http://tempo.apps.internal:4317"
        tls {
            insecure = true
        }
    }

}
