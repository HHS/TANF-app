commands:
  ###
  # General re-usable commands
  #
  cf-check:
    steps:
      - run:
          name: Ensure cf cli is installed, otherwise install it.
          command: sudo ./scripts/cf-check.sh

  docker-compose-check:
    steps:
      - run:
          name: Ensure docker-compose exists, otherwise install it.
          command: ./scripts/docker-compose-check.sh

  docker-compose-up-backend:
    steps:
      - run:
          name: Build and spin-up Django API service
          command: cd tdrs-backend; docker-compose up -d --build

  docker-compose-up-frontend:
    steps:
      - run:
          name: Build and spin-up React application
          command: cd tdrs-frontend; docker-compose up -d --build

  disable-npm-audit:
    steps:
      - run:
          name: Disable npm audit warnings in CI
          command: npm set audit false

  # This allows us to use the orb stanza for node/install within other commands
  # NOTE: This doesn't work correctly on machine executors
  install-nodejs: node/install

  # This allows us to use the node orb to install packages within other commands
  install-nodejs-packages: node/install-packages

  install-nodejs-machine:
    description: |
      Installs our target version of Node.JS using NVM (Node Version Manager)
      from the install location provided by machine executor images.
    steps:
      - run:
          name: Install Node.JS
          command: |
            sudo apt-get update
            sudo apt-get install -y libgbm-dev
            source /opt/circleci/.nvm/nvm.sh
            nvm install v16.13
            nvm alias default v16.13
            echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
            echo "[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"" >> $BASH_ENV

  run-owasp-scan:
    description: Runs OWASP ZAP scanner and stores resulting artifacts.
    parameters:
      environment:
        description: The environment this script is being run for.
        type: enum
        enum: ["circle", "nightly"] 
      target:
        description: The target application to be scanned.
        type: enum
        enum: ["backend", "frontend"]
      target_env:
        description: The target environment to be scanned.
        type: enum
        default: "develop"
        enum: ["staging", "develop", "prod"]
    steps:
      - run:
          name: Execute OWASP ZAP vulnerability scan
          #wait up to 60min for scan
          no_output_timeout: 60m
          command: ./scripts/zap-scanner.sh <<parameters.target>> <<parameters.environment>> <<parameters.target_env>>
      - store_artifacts:
          path: tdrs-<<parameters.target>>/reports/owasp_report.html

  sudo-check:
    steps:
      - run:
          name: Ensure sudo is installed, otherwise install it.
          command: ./scripts/sudo-check.sh

  upload-codecov:
    description: Uploads testing code coverage results to Codecov
    parameters:
      component:
        description: The component of the application being tested, either backend or frontend.
        type: enum
        enum: [ "backend", "frontend" ]
      coverage-report:
        description: The path to the coverage report being uploaded.
        type: string
    steps:
      - run:
          name: Ensure Codecov uploader is installed, otherwise install it.
          command: ./scripts/codecov-check.sh
      - run:
          name: Determine Codecov metric flag
          command: |
            if [ "$CIRCLE_BRANCH" == "main" ] ; then
              CURRENT_FLAG=main-<<parameters.component>>
            elif [ "$CIRCLE_BRANCH" == "master" ] ; then
              CURRENT_FLAG=master-<<parameters.component>>
            else
              CURRENT_FLAG=dev-<<parameters.component>>
            fi
            echo "export CURRENT_FLAG=$CURRENT_FLAG" >> $BASH_ENV
      - run:
          name: Upload code coverage report if target branch
          command: codecov -t "$CODECOV_TOKEN" -f <<parameters.coverage-report>> -F "$CURRENT_FLAG"

  ###
  # Deployment commands
  #
  login-cloud-dot-gov:
    description: Authenticates with Cloud.gov and sets org and space targets
    parameters:
      cf-password:
        type: env_var_name
        default: CF_PASSWORD_DEV
      cf-org:
        type: env_var_name
        default: CF_ORG
      cf-space:
        type: string
        default: tanf-dev
      cf-username:
        type: env_var_name
        default: CF_USERNAME_DEV
    steps:
      - run:
          name: Login to Cloud.gov and set application targets
          command: |
            cf login -a https://api.fr.cloud.gov \
              -u ${<<parameters.cf-username>>} \
              -p ${<<parameters.cf-password>>} \
              -o ${<<parameters.cf-org>>} \
              -s <<parameters.cf-space>>
  get-app-deploy-strategy:
    parameters:
      appname:
        type: string
    steps:
      - run:
          name: Determine deploy strategy
          command: |
            # NOTE: The || true is a no-op included to suppress exit codes which
            #       would cause the step to exit early due to use of pipefail
            APP_GUID=$(cf app <<parameters.appname>> --guid || true)
            if [ "$APP_GUID" == "FAILED" ]; then
              echo "export DEPLOY_STRATEGY=initial" >> $BASH_ENV
            else
              echo "export DEPLOY_STRATEGY=rolling" >> $BASH_ENV
            fi
  deploy-backend:
    parameters:
      backend-appname:
        default: tdp-backend
        type: string
      cf-space:
        default: tanf-dev
        type: string
    steps:
      - get-app-deploy-strategy:
          appname: <<parameters.backend-appname>>
      - run:
          name: Deploy backend application
          command: |
            bash ./scripts/deploy-backend.sh \
              $DEPLOY_STRATEGY \
              <<parameters.backend-appname>> \
              <<parameters.cf-space>>
  deploy-clamav:
    parameters:
      backend-appname:
        default: tdp-backend
        type: string
      cf-org:
        default: CF_ORG
        type: env_var_name
      cf-space:
        default: tanf-dev
        type: string
    steps:
      - run:
          name: Deploy ClamAV REST application
          command: |
            cf push clamav-rest -f tdrs-backend/manifest.clamav.yml \
              --var cf-space=<<parameters.cf-space>> \
      - run:
          name: Enable internal route between backend and clamav-rest app
          command: |
            cf add-network-policy <<parameters.backend-appname>> clamav-rest \
              -s <<parameters.cf-space>> \
              -o ${<<parameters.cf-org>>} \
              --protocol tcp \
              --port 9000
  deploy-frontend:
    parameters:
      environment:
        description: The environment to deploy to.
        type: enum
        enum: [ "development", "production" ]
        default: development
      backend-appname:
        default: tdp-backend
        type: string
      frontend-appname:
        default: tdp-frontend
        type: string

# So the frontend knows what space its in for the banner.
# I am unclear if the domain is a reliable metric to make this function 
# It seems like it might not be working
      cf-space:
        default: dev 
        type: string
    steps:
      - install-nodejs:
          node-version: "16.13"
      - disable-npm-audit
      - install-nodejs-packages:
          app-dir: tdrs-frontend
      - get-app-deploy-strategy:
          appname: <<parameters.frontend-appname>>
      - run:
          name: Deploy frontend application
          command: |
            bash ./scripts/deploy-frontend.sh \
              $DEPLOY_STRATEGY \
              <<parameters.frontend-appname>> \
              <<parameters.backend-appname>> \
              <<parameters.cf-space>> \
              <<parameters.environment>>
  deploy-cloud-dot-gov:
    parameters:
      environment:
        description: The environment to deploy to.
        type: enum
        enum: [ "development", "production" ]
        default: development
      backend-appname:
        default: tdp-backend
        type: string
      cf-password:
        default: CF_PASSWORD_DEV
        type: env_var_name
      cf-org:
        default: CF_ORG
        type: env_var_name
      cf-space:
        default: tanf-dev
        type: string
      cf-username:
        default: CF_USERNAME_DEV
        type: env_var_name
      frontend-appname:
        default: tdp-frontend
        type: string
    steps:
      - checkout
      - sudo-check
      - cf-check
      - login-cloud-dot-gov:
          cf-password: <<parameters.cf-password>>
          cf-org: <<parameters.cf-org>>
          cf-space: <<parameters.cf-space>>
          cf-username: <<parameters.cf-username>>
      - deploy-backend:
          backend-appname: <<parameters.backend-appname>>
          cf-space: <<parameters.cf-space>>
      - deploy-clamav:
          backend-appname: <<parameters.backend-appname>>
          cf-org: <<parameters.cf-org>>
          cf-space: <<parameters.cf-space>>
      - deploy-frontend:
          environment: <<parameters.environment>>
          backend-appname: <<parameters.backend-appname>>
          frontend-appname: <<parameters.frontend-appname>>
          cf-space: <<parameters.cf-space>>

  deploy-infrastructure:
    parameters:
      tf-path:
        type: string
        default: ./terraform/dev
      cf-password:
        type: env_var_name
        default: CF_PASSWORD_DEV
      cf-username:
        type: env_var_name
        default: CF_USERNAME_DEV
      cf-space:
        type: string
        default: tanf-dev
      cf-org:
        type: env_var_name
        default: CF_ORG
      cf-app:
        type: string
        default: CF_APP
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add jq
            apk add curl
            # TODO: Add Signature check
            curl -L "https://packages.cloudfoundry.org/stable?release=linux64-binary&version=v7&source=github" | tar -zx
            mv cf7 /usr/local/bin/cf
      - login-cloud-dot-gov:
          cf-password: <<parameters.cf-password>>
          cf-username: <<parameters.cf-username>>
          cf-space: <<parameters.cf-space>>
      - run:
          name: Export S3 Credentials for TFState
          command: |
            S3_CREDENTIALS=$(cf service-key tdp-tf-states tdp-tf-key | tail -n +2)
            {
              echo "access_key = \"$(echo "${S3_CREDENTIALS}" | jq -r .access_key_id)\""
              echo "secret_key = \"$(echo "${S3_CREDENTIALS}" | jq -r .secret_access_key)\""
              echo "region = \"$(echo "${S3_CREDENTIALS}" | jq -r '.region')\""
              echo "bucket = \"$(echo "${S3_CREDENTIALS}" | jq -r '.bucket')\""
            } >> ./backend_config.tfvars
      - run:
          name: Prepare Terraform Variables
          command: |
            S3_CREDENTIALS=$(cf service-key tdp-tf-states tdp-tf-key | tail -n +2)
            {
              echo "cf_password = \"$<<parameters.cf-password>>\""
              echo "cf_user = \"$<<parameters.cf-username>>\""
              echo "cf_space_name = \"<<parameters.cf-space>>\""
              echo "cf_app_name = \"<<parameters.cf-app>>\""
            } >> ./variables.tfvars
      - terraform/init:
          path: <<parameters.tf-path>>
          backend_config_file: ./backend_config.tfvars
      - terraform/validate:
          path: <<parameters.tf-path>>
      - terraform/fmt:
          path: <<parameters.tf-path>>
      - terraform/plan:
          path: <<parameters.tf-path>>
          var_file: ./variables.tfvars
      - terraform/apply:
          path: <<parameters.tf-path>>
          var_file: ./variables.tfvars
