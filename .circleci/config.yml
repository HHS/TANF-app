version: 2.1
jobs:
  test-backend:
    working_directory: ~/repo-backend
    docker:
      - image: circleci/python:3.8
        user : root
    branches:
    steps:
      - setup_remote_docker: 
         docker_layer_caching: true 
      - checkout
      - run:
          name: Install Docker Compose
          command: |
            set -x
            curl -L https://github.com/docker/compose/releases/download/1.25.3/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose           
      - run:
          name: "Test: Build and Spin-up Django API Service"
          command: "cd tdrs-backend; docker-compose up -d  --build "
      - run:
          name: "Tear Down Django API Service"
          command: "cd tdrs-backend; docker-compose down "
      - run:
          name:  "Test: Execute Python Unit Tests"
          command: "cd tdrs-backend; docker-compose run web sh -c \"pytest\""
      - run:
          name:  "Test: Execute Python Linting Test"
          command: "cd tdrs-backend; docker-compose run --rm web bash -c \"flake8 .\""
      - run:
          name:  "Test: Execute Python OWASP ZAP Vulnerability Scan"
          command: "cd tdrs-backend; ./zap-scanner.sh"
  test-ui:
    working_directory: ~/repo-frontend
    docker:
      - image: cypress/base:10
        user : root
    steps:
      - setup_remote_docker: 
         docker_layer_caching: true 
      - checkout
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin
      - run:
          name: Install Docker Compose
          command: |
            set -x
            curl -L https://github.com/docker/compose/releases/download/1.25.3/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose           
      - run:
          name: "Install Package Dependencies"
          command: "cd tdrs-frontend; yarn"
      - run:
          name: "Run ESLint"
          command: "cd tdrs-frontend; yarn lint"
      - run:
          name: "Run Pa11y Accessibility Tests"
          command: "cd tdrs-frontend; yarn test:accessibility"
      - run:
          name: "Run Jest Unit Tests"
          command: "cd tdrs-frontend; yarn test:ci"
      - run:
          name: "Run Cypress Integration Tests"
          command: "cd tdrs-frontend; yarn cy:run:ci"  
      - run:
          name:  "Test: Execute Frontend  OWASP ZAP Vulnerability Scan"
          command: "cd tdrs-frontend; ./zap-scanner.sh"        
  deploy:
    docker:
      - image: circleci/python:3.8
        user : root
    steps:
      - setup_remote_docker: 
         docker_layer_caching: true 
      - checkout
      - run: apt-get install -y sudo # https://discuss.circleci.com/t/sudo-command-not-found/14208/4
      - run: ls -al /bin/sh && sudo rm /bin/sh && sudo ln -s /bin/bash /bin/sh && ls -al /bin/sh
      - run: &installcf
          name: "install cf-cli"
          command: |
            apt-get update
            apt-get install wget gnupg2 apt-transport-https
            wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
            echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
            apt-get update
            apt-get install cf7-cli
      - run:
          name: "Log Into Docker"
          command: "echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin"    
      - run:
          name:  "Build Backend Docker image"
          command: "cd tdrs-backend; docker build -t goraftdocker/tdp-backend:devtest . -f ./docker/Dockerfile.dev"
      - run:
          name:  "Push Backend Image to Docker Hub"
          command: "docker push goraftdocker/tdp-backend:devtest"
      - run:
          name:  "Build Frontend Docker image"
          command: "cd tdrs-frontend; docker build -t goraftdocker/tdp-frontend:devtest ."
      - run:
          name:  "Push Frontend Image to Docker Hub"
          command: "docker push goraftdocker/tdp-frontend:devtest"
      - run:
          name: "deploy to cloud.gov"
          command: |
            # If we do not specify a space, then deploy to the branch that we are on.
            # Also map certain branches to spaces.
            # This lets you have dev/staging/main branches that automatically go to the right place.
            cf api https://api.fr.cloud.gov
            cf auth $CF_USERNAME_DEV $CF_PASSWORD_DEV
            cf target -o $CF_ORG -s $CF_SPACE
            cd tdrs-backend; cf push tdp-backend --docker-image  goraftdocker/tdp-backend:test 
            cd tdrs-frontend; cf push tdp-frontend --docker-image  goraftdocker/tdp-frontend:test

workflows:
  build-and-test:
    jobs:
      - test-backend
      - test-ui
      - deploy:
          requires:
            - test-backend
            - test-ui
          filters:
            branches:
              only:
                - raft-main-test