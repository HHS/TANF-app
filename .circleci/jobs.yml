jobs:
  secrets-check:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: "git-secrets: Scan repository for committed secrets"
          command: ./scripts/git-secrets-check.sh
      - run:
          name: "trufflehog: Scan repository for committed secrets"
          command: ./scripts/trufflehog-check.sh $CIRCLE_BRANCH

  test-backend:
    executor: machine-executor
    steps:
      - checkout
      - docker-compose-check
      - docker-compose-up-backend
      - run:
          name: Execute Python Linting Test
          command: cd tdrs-backend; docker-compose run --rm web bash -c "flake8 ."
      - run:
          name: Run Unit Tests And Create Code Coverage Report
          command: |
            cd tdrs-backend;
            docker-compose run --rm web bash -c "./wait_for_services.sh && pytest --cov-report=xml"
      - upload-codecov:
          component: backend
          coverage-report: ./tdrs-backend/coverage.xml

  test-frontend:
    executor: machine-executor
    working_directory: ~/tdp-apps
    steps:
      - checkout
      - install-nodejs-machine
      - disable-npm-audit
      - install-nodejs-packages:
          app-dir: tdrs-frontend
      - run:
          name: Run ESLint
          command: cd tdrs-frontend; npm run lint
      - run:
          name: Run Pa11y Accessibility Tests
          command: cd tdrs-frontend; mkdir pa11y-screenshots/; npm run test:accessibility
      - run:
          name: Run Jest Unit Tests
          command: cd tdrs-frontend; npm run test:ci
      - upload-codecov:
          component: frontend
          coverage-report: ./tdrs-frontend/coverage/lcov.info
      - store_artifacts:
          path: tdrs-frontend/pa11y-screenshots/

  backend-owasp-scan:
    executor: machine-executor
    working_directory: ~/tdp-apps
    steps:
      - checkout
      - docker-compose-check
      - docker-compose-up-backend
      - run:
          name: Wait for Django to become available
          command: |
            cd tdrs-backend;
            docker-compose run --rm zaproxy bash -c \
              "PATH=$PATH:/home/zap/.local/bin &&
               pip install wait-for-it &&
               wait-for-it --service http://web:8080 \
                           --timeout 60 \
                           -- echo \"Django is ready\""
      - run-owasp-scan:
          environment: circle
          target: backend

  make_erd:
    executor: machine-executor
    working_directory: ~/tdp_apps
    steps:
      - checkout
      - docker-compose-check
      - run:
          name: Run graph_models
          command: |
            cd tdrs-backend;
            docker-compose run --rm web bash -c \
            "./manage.py graph_models -a -g -o tdp_erd.png"
      - store_artifacts:
          path: tdrs-backend/tdp_erd.png

  frontend-owasp-scan:
    executor: machine-executor
    working_directory: ~/tdp-apps
    steps:
      - checkout
      - docker-compose-check
      - docker-compose-up-frontend
      - run:
          name: Wait for frontend to become available
          command: |
            cd tdrs-frontend;
            docker-compose run --rm zaproxy bash -c \
              "PATH=$PATH:/home/zap/.local/bin &&
               pip install wait-for-it &&
               wait-for-it --service http://tdp-frontend/ \
                           --timeout 60 \
                           -- echo \"Frontend is ready\""
      - run-owasp-scan:
          environment: circle
          target: frontend

  nightly-owasp-scan:
    executor: machine-executor
    working_directory: ~/tdp-apps
    parameters:
      cf_password:
        type: string
        default: CF_PASSWORD_STAGING
      cf_username:
        type: string
        default: CF_USERNAME_STAGING
      cf_space:
        type: string
        default: tanf-staging
      target_env:
        type: enum
        enum: [ "staging", "develop", "prod" ]
    steps:
      - checkout
      - sudo-check
      - cf-check
      - docker-compose-check
      - run-owasp-scan:
          environment: nightly
          target: backend
          target_env: <<parameters.target_env>>
      - run-owasp-scan:
          environment: nightly
          target: frontend
          target_env: <<parameters.target_env>>
      - login-cloud-dot-gov:
          cf-password: <<parameters.cf_password>>
          cf-space: <<parameters.cf_space>>
          cf-username: <<parameters.cf_username>>
      - run:
          name: Run post-processing task to record OWASP ZAP results
          command: |
            # Construct the project slug from the current branch name and user
            PROJECT_SLUG=$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME

            # These environment variables are exported to Circle CI's BASH_ENV
            # by the zap-scanner.sh script for each respective app target.
            CMD_ARGS=(
              "$CIRCLE_BUILD_NUM"
              --backend-pass-count ${ZAP_BACKEND_PASS_COUNT:-0}
              --backend-warn-count ${ZAP_BACKEND_WARN_COUNT:-0}
              --backend-fail-count ${ZAP_BACKEND_FAIL_COUNT:-0}
              --frontend-pass-count ${ZAP_FRONTEND_PASS_COUNT:-0}
              --frontend-warn-count ${ZAP_FRONTEND_WARN_COUNT:-0}
              --frontend-fail-count ${ZAP_FRONTEND_FAIL_COUNT:-0}
              --project-slug $PROJECT_SLUG
            )
            # Evaluate the full command before passing it in so it doesn't
            # get improperly interpolated by Cloud.gov.
            CMD="python manage.py process_owasp_scan ${CMD_ARGS[@]}"
            # Submit a CF Task for execution that will run the necessary command
            cf run-task tdp-backend-<< parameters.target_env >> \
              --command "$CMD" \
              --name nightly-owasp-scan
  deploy-infrastructure-dev:
    executor: terraform/default
    working_directory: ~/tdp-deploy
    parameters:
      target_env:
        type: string
    steps:
      - deploy-infrastructure:
          cf-app: << parameters.target_env >>

  deploy-dev:
    executor: docker-executor
    parameters:
      target_env:
        type: string
    working_directory: ~/tdp-deploy
    steps:
      - deploy-cloud-dot-gov:
          backend-appname: tdp-backend-<< parameters.target_env >>
          frontend-appname: tdp-frontend-<< parameters.target_env >>

  deploy-infrastructure-staging:
    executor: terraform/default
    working_directory: ~/tdp-deploy
    steps:
      - deploy-infrastructure:
          cf-password: CF_PASSWORD_STAGING
          cf-username: CF_USERNAME_STAGING
          cf-space: tanf-staging
          tf-path: ./terraform/staging

  deploy-staging:
    executor: docker-executor
    working_directory: ~/tdp-deploy
    steps:
      - deploy-cloud-dot-gov:
          backend-appname: tdp-backend-staging
          frontend-appname: tdp-frontend-staging
          cf-password: CF_PASSWORD_STAGING
          cf-space: tanf-staging
          cf-username: CF_USERNAME_STAGING

  deploy-infrastructure-develop:
    executor: terraform/default
    working_directory: ~/tdp-deploy
    steps:
      - deploy-infrastructure:
          cf-password: CF_PASSWORD_STAGING
          cf-username: CF_USERNAME_STAGING
          cf-space: tanf-staging
          tf-path: ./terraform/staging

  deploy-develop:
    executor: docker-executor
    working_directory: ~/tdp-deploy
    steps:
      - deploy-cloud-dot-gov:
          backend-appname: tdp-backend-develop
          frontend-appname: tdp-frontend-develop
          cf-password: CF_PASSWORD_STAGING
          cf-space: tanf-staging
          cf-username: CF_USERNAME_STAGING

  deploy-project-updates-site:
    parameters:
      cf-org:
        default: CF_ORG
        type: env_var_name
      cf-space:
        default: tanf-dev
        type: string
      cf-password:
        type: env_var_name
        default: CF_PASSWORD_DEV
      cf-username:
        type: env_var_name
        default: CF_USERNAME_DEV
    executor: docker-executor
    working_directory: ~/tdp-deploy
    steps:
      - checkout
      - sudo-check
      - cf-check
      - login-cloud-dot-gov:
          cf-password: <<parameters.cf-password>>
          cf-org: <<parameters.cf-org>>
          cf-space: <<parameters.cf-space>>
          cf-username: <<parameters.cf-username>>
      - run:
          name: Deploy TDP Project Updates Site
          command: ./scripts/deploy-tdp-product-update-site.sh rolling tdp-project-updates

  deploy-infrastructure-production:
    executor: terraform/default
    working_directory: ~/tdp-deploy
    steps:
      - deploy-infrastructure:
          cf-password: CF_PASSWORD_PROD
          cf-username: CF_USERNAME_PROD
          cf-space: tanf-prod
          tf-path: ./terraform/production

  deploy-production:
    executor: docker-executor
    working_directory: ~/tdp-deploy
    steps:
      - deploy-cloud-dot-gov:
          environment: production
          backend-appname: tdp-backend-prod
          frontend-appname: tdp-frontend-prod
          cf-password: CF_PASSWORD_PROD
          cf-space: tanf-prod
          cf-username: CF_USERNAME_PROD
