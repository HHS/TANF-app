
worker_processes 1;
daemon off;

error_log stderr;
events { worker_connections 1024; }

http {
    charset utf-8;
    log_format cloudfoundry 'NginxLog "$request" $status $body_bytes_sent';
    access_log /dev/stdout cloudfoundry;

    default_type application/octet-stream;
    include mime.types;
    sendfile on;

    tcp_nopush on;
    keepalive_timeout 30;
    port_in_redirect off; # Ensure that redirects don't include the internal container PORT - 8080

    log_format compression '$remote_addr - $remote_user [$time_local] '
                            '"proxy_host and upstream_addr": $proxy_host $upstream_addr, '
                           ' "request": $request, '
                           '"body_bytes_sent" : $body_bytes_sent, ' 
                           '"request_body": $request_body, '
                           '"http_x_forwarded_for": $http_x_forwarded_for, ' 
                            '"host": $host, '
                            ' "status": $status, '
                            '"proxy_add_x_forwarded_for": $proxy_add_x_forwarded_for, '
                           '"http_referer": $http_referer, '
                           '"http_user_agent": $http_user_agent, '
                           '"cookies=$http_cookie;"  "server=$server_name" "http_host=$http_host"';

    limit_req_zone $binary_remote_addr zone=limitreqsbyaddr:20m rate=1000r/s;
    limit_req_status 444;

    server {
        root public;
        listen {{port}};
        access_log /home/vcap/app/nginx_access.log compression;

        include locations.conf;
        client_max_body_size 100m;
        
        # Block all requests except ones listed in whitelist; disabled for local
        # First have to correct the source IP address using real_ip_header, otherwise
        # the IP address will be the internal IP address of the router
        set_real_ip_from  10.0.0.0/8;
        set_real_ip_from  127.0.0.1;
        real_ip_header    X-Forwarded-For;
        real_ip_recursive on;
        include ip_whitelist.conf;

        set $CONNECT_SRC {{env "CONNECT_SRC"}};
        set $ALLOWED_ORIGIN {{env "ALLOWED_ORIGIN"}};

        set $CSP "default-src 'self';";
        set $CSP "${CSP}script-src 'self';";
        set $CSP "${CSP}script-src-elem 'self';";
        set $CSP "${CSP}script-src-attr 'self';";
        set $CSP "${CSP}img-src 'self' data:;";
        set $CSP "${CSP}font-src 'self';";
        set $CSP "${CSP}connect-src 'self' ${CONNECT_SRC};";
        set $CSP "${CSP}manifest-src 'self';";
        set $CSP "${CSP}object-src 'none';";
        set $CSP "${CSP}frame-ancestors 'none';";
        set $CSP "${CSP}form-action 'self';";
        set $CSP "${CSP}frame-src 'None';";
        set $CSP "${CSP}child-src 'none';";
        set $CSP "${CSP}media-src 'none';";
        set $CSP "${CSP}prefetch-src 'none';";
        set $CSP "${CSP}style-src 'self' 'unsafe-inline';";
        set $CSP "${CSP}style-src-elem 'self' 'unsafe-inline';";
        set $CSP "${CSP}style-src-attr 'self' 'unsafe-inline';";
        set $CSP "${CSP}worker-src 'none';";
        add_header Content-Security-Policy $CSP;

        add_header Content-Security-Policy "${CSP}";
        add_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0";
        add_header Access-Control-Allow-Origin "${ALLOWED_ORIGIN}";
    }
}
